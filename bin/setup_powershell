#!/usr/bin/env sh
# shellcheck shell=sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202305011152-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.com
# @@License          :  WTFPL
# @@ReadME           :  setup_powershell --help
# @@Copyright        :  Copyright: (c) 2023 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, May 01, 2023 11:52 EDT
# @@File             :  setup_powershell
# @@Description      :
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  shell/sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC2317
# shellcheck disable=SC2120
# shellcheck disable=SC2155
# shellcheck disable=SC2199
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0" 2>/dev/null)"
VERSION="202305011152-git"
RUN_USER="$USER"
SET_UID="$(id -u)"
SCRIPT_SRC_DIR="$(cd "$(dirname "$0")" && pwd)"
SETUP_POWERSHELL_CWD="$(realpath "$PWD")"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  __printf_color() { printf '%b' "$1\n" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  __printf_color() { { [ -z "$2" ] || DEFAULT_COLOR=$2; } && printf "%b" "$(tput setaf "$DEFAULT_COLOR" 2>/dev/null)" "$1\n" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for command
__cmd_exists() { which $1 >/dev/null 2>&1 || return 1; }
__function_exists() { builtin type $1 >/dev/null 2>&1 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# custom functions
get_releases() { curl -q -LSsf -H "Accept: application/vnd.github+json" "$SETUP_POWERSHELL_LATEST_URL" 2>/dev/null | jq -r '.assets[].browser_download_url' 2>/dev/null | grep -v 'fxdependent' | grep "$os-$arch" | grep -E '.tar.gz|.zip' | head -n1 | grep '^' || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
extract() {
  args="$*"
  builtin cd "$SETUP_POWERSHELL_TEMP_DIR" || exit 1
  for arg in $args; do
    if [ -f "$arg" ]; then
      case "$arg" in
      *.tar.bz2) tar xjf "$arg" ;;
      *.tar.gz) tar xzf "$arg" ;;
      *.tar.xz) tar xzf "$arg" ;;
      *.bz2) bunzip2 "$arg" ;;
      *.gz) gunzip "$arg" ;;
      *.tar) tar xf "$arg" ;;
      *.tbz2) tar xjf "$arg" ;;
      *.tgz) tar xzf "$arg" ;;
      *.zip) unzip "$arg" ;;
      *.Z) uncompress "$arg" ;;
      *.rar) rar x "$arg" ;;    # 'rar' must to be installed
      *.jar) jar -xvf "$arg" ;; # 'jdk' must to be installed
      *) shift ;;
      esac
    else
      echo "'$arg' is not a valid file"
    fi
  done
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Define variables
DEFAULT_COLOR="254"
SETUP_POWERSHELL_EXIT_STATUS=0
SETUP_POWERSHELL_TEMP_DIR="$HOME/.local/tmp/system_scripts/powershell"
[ -n "$SETUP_POWERSHELL_BIN_DIR" ] || SETUP_POWERSHELL_BIN_DIR="$HOME/.local/bin"
[ -n "$SETUP_POWERSHELL_INSTALL_DIR" ] || SETUP_POWERSHELL_INSTALL_DIR="$HOME/.local/share/powershell"
[ -n "$SETUP_POWERSHELL_LATEST_URL" ] || SETUP_POWERSHELL_LATEST_URL="https://api.github.com/repos/PowerShell/PowerShell/releases/latest"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -d "$SETUP_POWERSHELL_TEMP_DIR" ] || mkdir -p "$SETUP_POWERSHELL_TEMP_DIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
os="$(uname -s | tr '[:upper:]' '[:lower:]')"
arch="$(uname -m | tr '[:upper:]' '[:lower:]')"
if echo "$arch" | grep -q '.*86_64.*' || [ "$arch" = "amd64" ]; then
  arch="x64"
  posh_arch="amd64"
elif echo "$arch" | grep -q '.*aarch64.*' || [ "$arch" = "arm64" ]; then
  arch="arm64"
  posh_arch="arm64"
elif echo "$arch" | grep -q '.*arm.*'; then
  arch="arm32"
  posh_arch="arm"
elif echo "$arch" | grep -q 'i?86'; then
  arch="x86"
  posh_arch=""
else
  exit 1
fi
if [ "$os" = "linux" ]; then
  os=linux
elif [ "$os" = "darwin" ]; then
  os=osx
elif [ "$os" = "msys" ] || [ "$os" = "windowsnt" ] || [ "$os" = "cygwin" ]; then
  os=win
else
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
SETUP_POWERSHELL_LATEST_URL="$(get_releases)"
SETUP_POWERSHELL_LATEST_URL_FILE="$(basename "$SETUP_POWERSHELL_LATEST_URL")"
SETUP_POWERSHELL_LATEST_RELEASE_FILE="$SETUP_POWERSHELL_TEMP_DIR/$(basename "$SETUP_POWERSHELL_LATEST_URL")"
[ -e "$SETUP_POWERSHELL_INSTALL_DIR/pwsh" ] && rm -Rf "$SETUP_POWERSHELL_BIN_DIR/pwsh"
[ -e "$SETUP_POWERSHELL_INSTALL_DIR/powershell" ] && rm -Rf "$SETUP_POWERSHELL_BIN_DIR/powershell"
[ -e "$SETUP_POWERSHELL_LATEST_RELEASE_FILE" ] && rm -Rf "$SETUP_POWERSHELL_LATEST_RELEASE_FILE"
if [ -n "$SETUP_POWERSHELL_LATEST_URL" ]; then
  __printf_color "Downloading $SETUP_POWERSHELL_LATEST_URL_FILE" 6
  curl -q -LSsf -o "$SETUP_POWERSHELL_LATEST_RELEASE_FILE" "$SETUP_POWERSHELL_LATEST_URL" 2>/dev/null
  extract "$SETUP_POWERSHELL_LATEST_RELEASE_FILE"
else
  __printf_color "Failed to download from: $SETUP_POWERSHELL_LATEST_URL" 1 >&2
  exit 1
fi
if [ -d "$SETUP_POWERSHELL_TEMP_DIR" ] && [ -f "$SETUP_POWERSHELL_TEMP_DIR/pwsh" ]; then
  rsync -avhP "$SETUP_POWERSHELL_TEMP_DIR/" "$SETUP_POWERSHELL_INSTALL_DIR/" --delete >/dev/null 2>&1
  [ -L "$SETUP_POWERSHELL_BIN_DIR/pwsh" ] && unlink "$SETUP_POWERSHELL_BIN_DIR/pwsh"
  [ -L "$SETUP_POWERSHELL_BIN_DIR/powershell" ] && unlink "$SETUP_POWERSHELL_BIN_DIR/powershell"
  printf '#!/usr/bin/env sh\n\n%s\n' "exec $SETUP_POWERSHELL_INSTALL_DIR/pwsh \"\$@\"" >"$SETUP_POWERSHELL_BIN_DIR/pwsh"
  printf '#!/usr/bin/env sh\n\n%s\n' "exec $SETUP_POWERSHELL_INSTALL_DIR/pwsh \"\$@\"" >"$SETUP_POWERSHELL_BIN_DIR/powershell"
  chmod -Rf 755 "$SETUP_POWERSHELL_BIN_DIR/pwsh" "$SETUP_POWERSHELL_BIN_DIR/powershell"
  if [ -d "$SETUP_POWERSHELL_INSTALL_DIR" ] && [ -x "$SETUP_POWERSHELL_BIN_DIR/pwsh" ]; then
    rm -Rf" $SETUP_POWERSHELL_TEMP_DIR" "$SETUP_POWERSHELL_LATEST_RELEASE_FILE" >/dev/null 2>&1
  fi
  if [ -f "$SETUP_POWERSHELL_BIN_DIR/pwsh" ]; then
    __printf_color "Successfully saved powershell to: $SETUP_POWERSHELL_INSTALL_DIR" 2
    if [ "$os" = "win" ]; then
      command -v winget >/dev/null 2>&1 && winget install JanDeDobbeleer.OhMyPosh -s winget
    elif [ "$os" = "mac" ]; then
      command -v brew >/dev/null 2>&1 && brew install jandedobbeleer/oh-my-posh/oh-my-posh
    elif [ "$os" = "linux" ]; then
      if [ -n "$posh_arch" ]; then
        install_posh="$(curl -q -LSsf -H "Accept: application/vnd.github+json" https://api.github.com/repos/JanDeDobbeleer/oh-my-posh/releases/latest | jq -r '.assets[].browser_download_url' | grep "$os" | grep "$posh_arch$" || echo'')"
        if [ -n "$install_posh" ]; then
          __printf_color "Installing oh-my-posh" 5
          curl -q -LSsf "$install_posh" -o "$HOME/.local/bin/oh-my-posh"
          if [ -f "$HOME/.local/bin/oh-my-posh" ]; then
            chmod +x "$HOME/.local/bin/oh-my-posh"
            __printf_color "Successfully saved oh-my-posh to: ~/.local/bin/oh-my-posh" 2
          fi
        else
          __printf_color "Can not find oh-my-posh $install_posh"
        fi
      else
        __printf_color "oh-my-posh is not support on $arch" 1 >&2
      fi
    fi
    __printf_color "Initializing powershell modules" 3
    if [ -f "$HOME/.config/powershell/Microsoft.SETUP_POWERSHELL_profile.ps1" ]; then
      mv -f "$HOME/.config/powershell/Microsoft.SETUP_POWERSHELL_profile.ps1" "$HOME/.config/powershell/Microsoft.SETUP_POWERSHELL_profile.bak"
    fi
    if [ -f "$HOME/.config/powershell/init.ps1" ]; then
      eval "$SETUP_POWERSHELL_INSTALL_DIR/pwsh -Command $HOME/.config/powershell/init.ps1" >/dev/null
    fi
    if [ -f "$HOME/.config/powershell/Microsoft.SETUP_POWERSHELL_profile.bak" ]; then
      mv -f "$HOME/.config/powershell/Microsoft.SETUP_POWERSHELL_profile.bak" "$HOME/.config/powershell/Microsoft.SETUP_POWERSHELL_profile.ps1"
    fi
  fi
  if __cmd_exists pwsh; then
    version="$(powershell --version | sed 's|.* ||g')"
    for tmp_dir in $SETUP_POWERSHELL_TEMP_DIR $SETUP_POWERSHELL_LATEST_RELEASE_FILE; do
      __printf_color "Cleaning up: $tmp_dir" 6
    done
    __printf_color "Powershell $version has been installed" 200
    SETUP_POWERSHELL_EXIT_STATUS=0
  else
    SETUP_POWERSHELL_EXIT_STATUS=1
  fi
else
  __printf_color "Well something went wrong" 1 >&2
  SETUP_POWERSHELL_EXIT_STATUS=1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $SETUP_POWERSHELL_EXIT_STATUS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
